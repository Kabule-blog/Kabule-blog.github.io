机器学习笔记
1、什么是机器学习？
输入大量的学习资料->机器学习算法->使用模型(f(x))->输出结果
2、机器学习（监督学习）解决问题的角度分为两类任务：分类与回归
分类任务：二分类和多分类
回归任务：输出结果是一个连续的数字而非一个类别（房屋价格，市场分析，学生成绩，股票价格）
3、机器学习算法分类：监督学习，非监督学习，半监督学习和增强学习
<1>监督学习：给训练的数据“标签（记）”
监督学习算法有：K近邻，线性回归和多项式回归、逻辑回归、svm、决策树和随机森林
<2>无监督学习：给机器的训练数据没有任何标记，对没有标记的数据进行分类-聚类分析
非监督学习包含：对数据进行降维处理    非监督学习的意义：异常检测
对数据进行降维处理：
特征提取：
特征压缩：PCA
<3>半监督学习：一部分数据有标记，另一部分没有，比如：各种原因产生的标记缺失
通常使用无监督学习手段对数据做处理，使得整个数据变成监督学习的模式，之后使用监督学习手段做模型的训练和预测。
<4>增强学习：根据周围环境的情况，采取行动，根据采取行动的结果，学习行动方式。
4、批量学习和在线学习
<1>批量学习：通过机器学习算法训练成的模型不会因为新输入的样例发生改变，即不会再进行优化了。解决办法：定时重新批量学习。
优点：简单。
缺点：每次进行批量学习，运算量巨大；在某些环境变化非常快的情况下，甚至不可能。
<2>在线学习：通过机器学习算法训练成的模型，将新输入的样例放入该模型进行预测得到的结果与正确结果一并迭代到算法中，继续对模型进行优化。
优点：及时反映新的环境变化。
缺点：有时产生的异常数据也会非常快的进入到训练模型中，导致模型预测性能下降。解决办法：需要加强对数据进行监控。
5、参数学习和非参数学习
<1>参数学习：先对模型进行假设（比如说假设为线性f（x）=a*x+b），然后找到一个好的参数a，b
特点：一旦学习到了参数，就不再需要原有的数据集
<2>非参数学习（非参数不代表没有参数！！）：不对模型进行过多的假设










Jupyter Notebook，numpy的基础知识
一、Jupyter Notebook语法规则：
1、%run
2、%timeit：测试代码的性能，计时（系统执行多次）
%timeit后面只能接一句命令，若想测试一段代码的性能，使用%%timeit
3、%time：测试代码的性能，计时（系统执行一次）
二、numpy库
1、numpy.array:数组
E.g.>nparr=numpy.array([i for i in range(10)])
>nparr[5]    //查询元素
2、创建numpy数据和矩阵（开头使用import numpy as np,以下np表示numpy）
numpy.zeros[(shape=)i，dtype=int]:创建i个0元素的数组,元素为int型。
numpy.zeros[(3,5)]:创建一个3行5列的数组
numpy.ones[10]:创建10个1元素的数组
numpy.full[shape=(i,j),fill_value=n]:用来创建指定值的矩阵
range(i,j,k):i为起始点，j为末点，k为步长（不能为浮点数）
Np.arange(i,j,k):原理同上（步长k可为浮点数）不包括j的！！
Np.linspace(i,j,k):i为起始点，j为末点，k为从i开始到j一共要截k个数字。（这里包括j！！）
Np.random.randint(i,j,size=k):i,j（不包含j！！）表示随机数生成的范围，k表示创建k个元素的数组
Np.random.randint(i,j,size=(m,n)):标识随机生成一个m行n列的二维数组，元素在[i,j)范围内；
Np.random.random(i):随机生成i个0和1之间的浮点数
Np.random.random([i,j]):
Np.random.normal(i,j):随机生成一个符合均值为i，方差为j的正态分布的随机数
Np.random.normal(i,j,(m,n)):
3、numpy数组和矩阵的基本操作
numpy的基本属性：ndim(查看数组是几维数组)；shape：返回一个元组，如果是一维，那么只有一个元素，如果是二维就返回两个元素（这两个元素分别表示行列上元素的个数）组成的元组；size：表示元素的个数
Numpy.array数组元素的访问：一维数组直接用x[i]访问即可；二维数组可用x[i][j]或者x[i,j]访问。
切片：x[i:j:k]:从i开始，到j结束，步长为k；对于二维数组，若想取前i行，前j列，应该使用x[:i,:j]而不是x[:i][:j]！！如果想取二维数组的第一列可以用x[:,0]这种方式！！
特别注意：使用切片获得的子矩阵和原矩阵依然有联系，比如改变子矩阵中的元素，原矩阵中对应的元素也被修改！！若想修改子矩阵中元素，而原矩阵保持不变可以在原矩阵进行切片生成子矩阵的时候调用copy()方法！！E.g.subx=x[:2,:3].copy()
Reshape:可以将一维数组重新构造成二维数组，或将二维数组重新构造成一维
e.g.x=(1,2,3,4,5,6,7,8,9,10)    x.reshape(2,5)    x=([1,2,3,4,5],[6,7,8,9,10])
4、数组和矩阵的合并和分割
合并：



